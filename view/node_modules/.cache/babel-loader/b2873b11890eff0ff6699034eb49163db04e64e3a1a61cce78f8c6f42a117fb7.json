{"ast":null,"code":"// import React, { useEffect, useState } from 'react';\n// import { useSelector } from 'react-redux';\n// import { useNavigate } from 'react-router';\n// import { getCart } from '../Components/Cart/CartSlice';\n// import Styles from './Styles/CartPage.module.css';\n\n// function CartPage() {\n//     const cart = useSelector(getCart);\n//     const navigate = useNavigate();\n//     // Setting totals array\n//     const [price, setPrice] = useState([]);\n//     const [verified, setVerified] = useState(false);\n\n//     // Initialize quantity state with each product's default quantity set to 1\n//     const [quantities, setQuantities] = useState(\n//         cart.reduce((acc, product) => {\n//             acc[product.name] = 1;\n//             return acc;\n//         }, {})\n//     );\n\n//     // Handle quantity change\n//     const handleQuantityChange = (event, productName) => {\n//         setQuantities({\n//             ...quantities,\n//             [productName]: event.target.value,\n//         });\n//     };\n\n//     const checkAuth = async () => {\n//         const response = await fetch('http://localhost:50423/api/check', {\n//             credentials: 'include',\n//         });\n//         const json = await response.json();\n//         console.log(json);\n//         const verified = json.result;\n//         setVerified(verified)\n//         if (!verified) {\n//             setTimeout(() => navigate('/login'), 1000);\n//         } \n//     }\n\n//     useEffect(() => {\n//         checkAuth();\n//     }, [])\n\n//     useEffect(() => {\n//         const total = cart.reduce((acc, product) => {\n//             return acc += quantities[product.name] * product.price;\n//         }, 0);\n//         setPrice(total);\n//     }, [quantities])\n\n//     if (!verified) {\n//         return <p className={Styles.error}>To access this page, you must be logged in. Please wait to be redirected.</p>\n//     }\n\n//     return (\n//         <div className={Styles.cartPage}>\n//             <h2>Cart</h2>\n//             <form action='http://localhost:50423/api/order' method='POST'>\n//                 {cart.map(product => (\n//                     <div key={product.name}>\n//                         <label htmlFor={product.name}>{product.name}:</label>\n//                         <input\n//                             id={product.name}\n//                             type='number'\n//                             value={quantities[product.name]} // Controlled input\n//                             onChange={(event) => handleQuantityChange(event, product.name)} // Update state on change\n//                             required\n//                         />\n//                         <p>Total for {product.name} is £{quantities[product.name] * product.price}</p>\n//                         <hr></hr>\n//                     </div>\n//                 ))}\n//                 <p>Total: £{price}</p>\n//                 <hr></hr>\n//                 <button type='submit'>Order Now</button>\n//             </form>\n//         </div>\n//     );\n// }\n\n// export default CartPage;\n\n// import React, { useEffect, useState } from 'react';\n// import { useSelector } from 'react-redux';\n// import { useNavigate } from 'react-router';\n// import { loadStripe } from '@stripe/stripe-js'; // Import Stripe\n// import { getCart } from '../Components/Cart/CartSlice';\n// import Styles from './Styles/CartPage.module.css';\n\n// const stripePromise = loadStripe('pk_test_51QJhLcFSdvIgaIEWN9awNHE7eQM6OVV9CQBJWHLZ8Qe7z9cCdHuJfCiMkoQP9yWXM4VttPnqNedNPZrP2r70E4gu003n0mfzvl');\n\n// function CartPage() {\n//     const cart = useSelector(getCart);\n//     const navigate = useNavigate();\n//     const [price, setPrice] = useState([]);\n//     const [verified, setVerified] = useState(false);\n\n//     const [quantities, setQuantities] = useState(\n//         cart.reduce((acc, product) => {\n//             acc[product.name] = 1;\n//             return acc;\n//         }, {})\n//     );\n\n//     const handleQuantityChange = (event, productName) => {\n//         setQuantities({\n//             ...quantities,\n//             [productName]: event.target.value,\n//         });\n//     };\n\n//     const checkAuth = async () => {\n//         const response = await fetch('http://localhost:50423/api/check', {\n//             credentials: 'include',\n//         });\n//         const json = await response.json();\n//         setVerified(json.result);\n//         if (!json.result) {\n//             setTimeout(() => navigate('/login'), 1000);\n//         }\n//     };\n\n//     useEffect(() => {\n//         checkAuth();\n//     }, []);\n\n//     useEffect(() => {\n//         const total = cart.reduce((acc, product) => {\n//             return (acc += quantities[product.name] * product.price);\n//         }, 0);\n//         setPrice(total);\n//     }, [quantities]);\n\n//     const handleCheckout = async () => {\n//         const stripe = await stripePromise;\n//         const response = await fetch('http://localhost:50423/api/create-checkout-session', {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({ cart, quantities }),\n//         });\n//         const session = await response.json();\n//         if (session.url) {\n//             window.location.href = session.url; // Redirect to Stripe checkout\n//         }\n//     };\n\n//     if (!verified) {\n//         return <p className={Styles.error}>To access this page, you must be logged in. Please wait to be redirected.</p>;\n//     }\n\n//     return (\n//         <div className={Styles.cartPage}>\n//             <h2>Cart</h2>\n//             {cart.map((product) => (\n//                 <div key={product.name}>\n//                     <label htmlFor={product.name}>{product.name}:</label>\n//                     <input\n//                         id={product.name}\n//                         type='number'\n//                         value={quantities[product.name]}\n//                         onChange={(event) => handleQuantityChange(event, product.name)}\n//                         required\n//                     />\n//                     <p>Total for {product.name} is £{quantities[product.name] * product.price}</p>\n//                     <hr></hr>\n//                 </div>\n//             ))}\n//             <p>Total: £{price}</p>\n//             <hr></hr>\n//             <button type='button' onClick={handleCheckout}>Checkout with Stripe</button>\n//         </div>\n//     );\n// }\n\n// export default CartPage;","map":{"version":3,"names":[],"sources":["/Users/abhikvinod/Documents/python/Ecommerce_PERN_App/view/src/Features/CartPage.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import { useSelector } from 'react-redux';\n// import { useNavigate } from 'react-router';\n// import { getCart } from '../Components/Cart/CartSlice';\n// import Styles from './Styles/CartPage.module.css';\n\n// function CartPage() {\n//     const cart = useSelector(getCart);\n//     const navigate = useNavigate();\n//     // Setting totals array\n//     const [price, setPrice] = useState([]);\n//     const [verified, setVerified] = useState(false);\n\n//     // Initialize quantity state with each product's default quantity set to 1\n//     const [quantities, setQuantities] = useState(\n//         cart.reduce((acc, product) => {\n//             acc[product.name] = 1;\n//             return acc;\n//         }, {})\n//     );\n\n//     // Handle quantity change\n//     const handleQuantityChange = (event, productName) => {\n//         setQuantities({\n//             ...quantities,\n//             [productName]: event.target.value,\n//         });\n//     };\n\n//     const checkAuth = async () => {\n//         const response = await fetch('http://localhost:50423/api/check', {\n//             credentials: 'include',\n//         });\n//         const json = await response.json();\n//         console.log(json);\n//         const verified = json.result;\n//         setVerified(verified)\n//         if (!verified) {\n//             setTimeout(() => navigate('/login'), 1000);\n//         } \n//     }\n\n//     useEffect(() => {\n//         checkAuth();\n//     }, [])\n\n//     useEffect(() => {\n//         const total = cart.reduce((acc, product) => {\n//             return acc += quantities[product.name] * product.price;\n//         }, 0);\n//         setPrice(total);\n//     }, [quantities])\n\n//     if (!verified) {\n//         return <p className={Styles.error}>To access this page, you must be logged in. Please wait to be redirected.</p>\n//     }\n\n//     return (\n//         <div className={Styles.cartPage}>\n//             <h2>Cart</h2>\n//             <form action='http://localhost:50423/api/order' method='POST'>\n//                 {cart.map(product => (\n//                     <div key={product.name}>\n//                         <label htmlFor={product.name}>{product.name}:</label>\n//                         <input\n//                             id={product.name}\n//                             type='number'\n//                             value={quantities[product.name]} // Controlled input\n//                             onChange={(event) => handleQuantityChange(event, product.name)} // Update state on change\n//                             required\n//                         />\n//                         <p>Total for {product.name} is £{quantities[product.name] * product.price}</p>\n//                         <hr></hr>\n//                     </div>\n//                 ))}\n//                 <p>Total: £{price}</p>\n//                 <hr></hr>\n//                 <button type='submit'>Order Now</button>\n//             </form>\n//         </div>\n//     );\n// }\n\n// export default CartPage;\n\n// import React, { useEffect, useState } from 'react';\n// import { useSelector } from 'react-redux';\n// import { useNavigate } from 'react-router';\n// import { loadStripe } from '@stripe/stripe-js'; // Import Stripe\n// import { getCart } from '../Components/Cart/CartSlice';\n// import Styles from './Styles/CartPage.module.css';\n\n// const stripePromise = loadStripe('pk_test_51QJhLcFSdvIgaIEWN9awNHE7eQM6OVV9CQBJWHLZ8Qe7z9cCdHuJfCiMkoQP9yWXM4VttPnqNedNPZrP2r70E4gu003n0mfzvl');\n\n// function CartPage() {\n//     const cart = useSelector(getCart);\n//     const navigate = useNavigate();\n//     const [price, setPrice] = useState([]);\n//     const [verified, setVerified] = useState(false);\n\n//     const [quantities, setQuantities] = useState(\n//         cart.reduce((acc, product) => {\n//             acc[product.name] = 1;\n//             return acc;\n//         }, {})\n//     );\n\n//     const handleQuantityChange = (event, productName) => {\n//         setQuantities({\n//             ...quantities,\n//             [productName]: event.target.value,\n//         });\n//     };\n\n//     const checkAuth = async () => {\n//         const response = await fetch('http://localhost:50423/api/check', {\n//             credentials: 'include',\n//         });\n//         const json = await response.json();\n//         setVerified(json.result);\n//         if (!json.result) {\n//             setTimeout(() => navigate('/login'), 1000);\n//         }\n//     };\n\n//     useEffect(() => {\n//         checkAuth();\n//     }, []);\n\n//     useEffect(() => {\n//         const total = cart.reduce((acc, product) => {\n//             return (acc += quantities[product.name] * product.price);\n//         }, 0);\n//         setPrice(total);\n//     }, [quantities]);\n\n//     const handleCheckout = async () => {\n//         const stripe = await stripePromise;\n//         const response = await fetch('http://localhost:50423/api/create-checkout-session', {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({ cart, quantities }),\n//         });\n//         const session = await response.json();\n//         if (session.url) {\n//             window.location.href = session.url; // Redirect to Stripe checkout\n//         }\n//     };\n\n//     if (!verified) {\n//         return <p className={Styles.error}>To access this page, you must be logged in. Please wait to be redirected.</p>;\n//     }\n\n//     return (\n//         <div className={Styles.cartPage}>\n//             <h2>Cart</h2>\n//             {cart.map((product) => (\n//                 <div key={product.name}>\n//                     <label htmlFor={product.name}>{product.name}:</label>\n//                     <input\n//                         id={product.name}\n//                         type='number'\n//                         value={quantities[product.name]}\n//                         onChange={(event) => handleQuantityChange(event, product.name)}\n//                         required\n//                     />\n//                     <p>Total for {product.name} is £{quantities[product.name] * product.price}</p>\n//                     <hr></hr>\n//                 </div>\n//             ))}\n//             <p>Total: £{price}</p>\n//             <hr></hr>\n//             <button type='button' onClick={handleCheckout}>Checkout with Stripe</button>\n//         </div>\n//     );\n// }\n\n// export default CartPage;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}